working directory: Es uno de los 3 estados de un proyecto de git, aquí se
encuentra en la computadora en la que se esta trabajando una copia del
repositorio, a partir de los cambios generados aquí se guarda una copia del
proyecto local y este "screenshot" es empleado por el usuario para actualizar el
proyecto de git mediante un commit.

index: es el segundo estado de un proyecto, son los archivos modificados del
working directory, a los cuales se le aplico el comando "git add" para
queposteriormente sean parte del proyecto alojado en el servidor remoto de git.
El index tambien es conocido como staging area o directory cache.

Un repositorio es una ubicación en la que se encuentran un conjunto de archivos
almacenados con cierta jerarquía y orden, la cual es descrita por metadatos
(fichas de descripción de datos).

repositorio local: es el repositorio ubicado en el equipo de un usuario de git,
en el realiza modificaciones en un proyecto para posteriormente actualizar los
archivos en el servidor remoto mediante adds, commits y pushs.

repositorio remoto: repositorio ubicado en los resvidores de github, contiene
todos los screenshots del proyecto (commits), de los cuales se hacen
responsables por pérdidas. Un usuario puede observar las modificaciones
realizadas entre versiones mediante checkouts, crear nuevos branches, extraer el
contenido del repositorio remoto y agregarlo al local mediante pulls.

dirty working tree: Ocurre cuando en el directorio del repositorio local hay
archivos ajenos al proyecto, los cuales no son seguidos por el index. Se dice
que un index esta sucio cuando los archivos almacenados en HEAD (los del último
commit) no concuerdan con los del directorio dado.

merge conflict: problemas de consistencia encontrados por github entre las
versiones de diferentes branches. Estos problema pueden ser generados por dos
versiones que poseen una misma línea modificada de dos formas diferentes, o
cuando un usuario elimina una línea que otro decidió modificar. Estos problemas
son al momento de realizar la integración de dos branches, github mostrará los
archivo que no pudieron ser actualizado debido a estos conflictos, e indicará
las líneas causantes del problema, aquí el usuario decide con que alternativa de
línea desea adoptar, para posteriormente guardarlos en un commit.
